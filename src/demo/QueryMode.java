/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package demo;

import java.io.File;
import java.util.Scanner;
import javax.swing.JFileChooser;
import java.sql.*;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FireBlazeTSETSR
 */
public class QueryMode extends javax.swing.JFrame {

    /**
     * Creates new form QueryMode
     */
    public QueryMode() {
        initComponents();
        jTextArea1.setVisible(false);
        jScrollPane3.setVisible(false);
        jButton2.setVisible(false);
        setQueryVisbility(false);
        timePicker1.setVisible(false);
        jDateChooser1.setVisible(false);
        jLabel4.setVisible(false);
        jComboBox4.setVisible(false);
        jComboBox5.setVisible(false);
        jToggleButton1.setVisible(false); //If time, meake work
        //jTextArea1.setOpaque(rootPaneCheckingEnabled);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton2 = new javax.swing.JButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        timePicker1 = new com.github.lgooddatepicker.components.TimePicker();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox<>();
        jComboBox5 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Import SQL file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 550, 190));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 380, 420, -1));

        jToggleButton1.setText("SQL editor");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 110, -1));

        jButton2.setText("Execute");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 350, 80, -1));

        jToggleButton2.setText("Basic Queries");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 110, -1));

        jLabel1.setText("Select from:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, -1, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Table", "Dvorana", "Spored", "Film", "Zvrst", "Film_oseba", "oseba", "vstopnica", "kupec", "odzivi" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 250, 130, -1));

        jLabel2.setText("Where:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 310, -1, -1));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 310, 130, -1));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "=", ">", "<" }));
        getContentPane().add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 310, -1, -1));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 310, 120, -1));

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 110, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Query Output:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));
        getContentPane().add(timePicker1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 310, 120, -1));
        getContentPane().add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 310, 120, -1));

        jLabel4.setText("Rows:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 280, -1, -1));

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 280, 130, -1));

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        getContentPane().add(jComboBox5, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 280, 130, -1));

        setSize(new java.awt.Dimension(604, 423));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser filechooser = new JFileChooser();

        DefaultTableModel model = new DefaultTableModel();

        try {
            File f = new File("");
            switch (filechooser.showOpenDialog(this)) {
                case JFileChooser.APPROVE_OPTION:
                    f = new File(filechooser.getSelectedFile().getAbsolutePath());
                    break;
                default:
                    //throw new AssertionError();
                    return;
            }

            Scanner in = new Scanner(f);
            String sql = "", r = "";
            String[] t;
            while (in.hasNext()) {
                r += in.nextLine() + " ";
            }

            System.out.println(r);
            t = r.split(";");
            sql = t[0];
            in.close();
            System.out.println(sql);

            Connection con = OracleConnection.getConnection();
            Statement st = con.createStatement();
            ResultSet rs = null;
            con.setAutoCommit(false);
            rs = st.executeQuery(sql);
            con.commit();

            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            for (int i = 1; i < columnCount; i++) {
                model.addColumn(rsmd.getColumnName(i));
            }
            jTable1.setModel(model);
            while (rs.next()) {
                Object[] row = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    row[i - 1] = rs.getObject(i);
                }
                model.addRow(row);
            }
            con.close();
            rs.close();
            st.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (jToggleButton2.isSelected()) {
            setQueryVisbility(false);
            jToggleButton2.setSelected(false);
        }

        if (jToggleButton1.isSelected()) {
            jTextArea1.setVisible(true);
            jScrollPane3.setVisible(true);
            jButton2.setVisible(true);
        } else {
            jTextArea1.setVisible(false);
            jScrollPane3.setVisible(false);
            jButton2.setVisible(false);
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
        if(jComboBox1.getSelectedIndex()==0){
        JOptionPane.showMessageDialog(rootPane, "Please select a table!");
            return;
        }
        
        if(jComboBox3.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(rootPane, "Please select an operation!");
            return;
        }
        
        if(jComboBox1.getSelectedIndex()==2 && jComboBox2.getSelectedIndex()==3){
            java.util.Date date = jDateChooser1.getDate();
            excQuery(jComboBox1.getSelectedItem().toString(), jComboBox2.getSelectedItem().toString(), jComboBox4.getSelectedItem().toString(), jComboBox5.getSelectedItem().toString(), jComboBox3.getSelectedItem().toString(), date);
            return;
        }
        
         if(jComboBox1.getSelectedIndex()==6 && jComboBox2.getSelectedIndex()==3){
             java.util.Date date = jDateChooser1.getDate();
            excQuery(jComboBox1.getSelectedItem().toString(), jComboBox2.getSelectedItem().toString(), jComboBox4.getSelectedItem().toString(), jComboBox5.getSelectedItem().toString(), jComboBox3.getSelectedItem().toString(), date);
            return;
        }
        
         if(jComboBox1.getSelectedIndex()==3 && jComboBox2.getSelectedIndex()==2){
            
             System.out.println(timePicker1.getTime().toString());
             String date = timePicker1.getTime().toString();
            excQueryTime(jComboBox1.getSelectedItem().toString(), jComboBox2.getSelectedItem().toString(), jComboBox4.getSelectedItem().toString(), jComboBox5.getSelectedItem().toString(), jComboBox3.getSelectedItem().toString(), date);
            return;
         }
         
         
        if(jComboBox1.getSelectedIndex()!=0)
            excQuery(jComboBox1.getSelectedItem().toString(), jComboBox2.getSelectedItem().toString(), jComboBox4.getSelectedItem().toString(), jComboBox5.getSelectedItem().toString(), jComboBox3.getSelectedItem().toString(), jTextField1.getText());
        }catch(Exception e){
            
            e.printStackTrace();
        
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        if (jToggleButton1.isSelected()) {
            jTextArea1.setVisible(false);
            jScrollPane3.setVisible(false);
            jButton2.setVisible(false);
            jToggleButton1.setSelected(false);
        }

        if (jToggleButton2.isSelected()) {
            setQueryVisbility(true);
            jButton2.setVisible(true);
        } else {
            setQueryVisbility(false);
            jComboBox1.setSelectedIndex(0);
            jComboBox3.setSelectedIndex(0);
            jComboBox4.setSelectedIndex(0);
            jComboBox5.setSelectedIndex(0);
            jDateChooser1.setVisible(false);
            timePicker1.setVisible(false);
            jComboBox5.setVisible(false);
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        new MainOverview().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        switch (jComboBox1.getSelectedIndex()) {
            case 1:
                fillMenus("DVORANA");
                break;
            case 2:
                fillMenus("SPORED");
                break;
            case 3:
                fillMenus("FILM");
                break;
            case 4:
                fillMenus("ZVRST");
                break;
            case 5:
                fillMenus("FILM_OSEBA");
                break;
            case 6:
                fillMenus("OSEBA");
                break;
            case 7:
                fillMenus("VSTOPNICA");
                break;
            case 8:
                fillMenus("KUPEC");
                break;
            case 9:
                fillMenus("ODZIVI");
                break;
            default:
                //throw new AssertionError();
                jComboBox2.removeAllItems();
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed

        switch (jComboBox1.getSelectedIndex()) {
            case 2:
                if (jComboBox2.getSelectedIndex() == 3) {
                    jDateChooser1.setVisible(true);
                    jTextField1.setVisible(false);
                } else {
                    jDateChooser1.setVisible(false);
                    jTextField1.setVisible(true);
                }
                break;
            case 3:
                if (jComboBox2.getSelectedIndex() == 2) {
                    timePicker1.setVisible(true);
                    jTextField1.setVisible(false);
                } else {
                    timePicker1.setVisible(false);
                    jTextField1.setVisible(true);
                }
                break;

            case 6:
                if (jComboBox2.getSelectedIndex() == 3) {
                    jDateChooser1.setVisible(true);
                    jTextField1.setVisible(false);
                } else {
                    jDateChooser1.setVisible(false);
                    jTextField1.setVisible(true);
                }
                break;

            default:

                break;

        }


    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        if(jComboBox4.getSelectedIndex()!=0)
            jComboBox5.setVisible(true);
        else
            jComboBox5.setVisible(false);
        
    }//GEN-LAST:event_jComboBox4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QueryMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QueryMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QueryMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QueryMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QueryMode().setVisible(true);
            }
        });
    }

    public void setQueryVisbility(boolean b) {
        jLabel1.setVisible(b);
        jLabel2.setVisible(b);
        jComboBox1.setVisible(b);
        jComboBox2.setVisible(b);
        jComboBox3.setVisible(b);
        jTextField1.setVisible(b);
        jLabel4.setVisible(b);
        jComboBox4.setVisible(b);
        jDateChooser1.setVisible(b);
    }

    public void fillMenus(String table) {
        jComboBox2.removeAllItems();
        jComboBox4.removeAllItems();
        jComboBox5.removeAllItems();
        jComboBox4.addItem("Select");
        jComboBox5.addItem("Select");
        try {
            Connection con = OracleConnection.getConnection();
            Statement st = con.createStatement();
            ResultSet rs = null;
            con.setAutoCommit(false);

            //rs = st.executeQuery("select * from "+table);
            DatabaseMetaData metaData = con.getMetaData();
            rs = metaData.getColumns(null, null, table, null);
            con.commit();
            while (rs.next()) {
                System.out.println(rs.getString("COLUMN_NAME"));
                jComboBox2.addItem(rs.getString("COLUMN_NAME"));
                jComboBox4.addItem(rs.getString("COLUMN_NAME"));
                jComboBox5.addItem(rs.getString("COLUMN_NAME"));
            }

            con.commit();
            con.close();
            rs.close();
            st.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void excQuery(String table, String col, String col1, String col2, String opr, String value) {
        jTable1.setEnabled(true);
        jTable1.setVisible(true);
        try {
            Connection con = OracleConnection.getConnection();
            Statement st = con.createStatement();
            ResultSet rs = null;
            con.setAutoCommit(false);
            if(col1.equals("Select")){
                 System.out.println("select " + col + " from " + table + " where " + col + "" + opr + "'" + value+"'");
                 rs = st.executeQuery("select " + col + " from " + table + " where " + col + "" + opr + "'" + value+"'");
               
            }else if(col2.equals("Select")){
                System.out.println("select " + col1 + " from " + table + " where " + col + "" + opr + "" + "'" + value+"'");
                rs = st.executeQuery("select " + col1 + " from " + table + " where " + col + "" + opr + "" + "'" + value+"'");
                
            }else{
                System.out.println("select " + col1 +", "+col2 + " from " + table + " where " + col + "" + opr + "" + "'" + value+"'");
                rs = st.executeQuery("select " + col1 +", "+col2 + " from " + table + " where " + col + "" + opr + "" + "'" + value+"'");
            }   
            con.commit();
            
            DefaultTableModel model = new DefaultTableModel();

            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            System.out.println(columnCount);
            
            /*while(rs.next()){
                for(int i = 1; i<=columnCount;i++){
                    System.out.print("Colname:"+rsmd.getColumnName(i)+" value" +rs.getObject(i));
                }
                System.out.println();
            }*/
            
            for (int i = 1; i <= columnCount; i++) {
                model.addColumn(rsmd.getColumnName(i));
            }
            jTable1.setModel(model);
            while (rs.next()) {
                Object[] row = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    row[i - 1] = rs.getObject(i);
                }
                model.addRow(row);
            }
            con.close();
            rs.close();
            st.close();

            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Invalid querry! \n"+e.getMessage());
            e.printStackTrace();
        }
    }

    public void excQuery(String table, String col, String col1, String col2, String opr, java.util.Date date) {
        jTable1.setEnabled(true);
        jTable1.setVisible(true);
        
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        String value = formatter.format(date);
        System.out.println(value);
        
        
        try {
            Connection con = OracleConnection.getConnection();
            Statement st = con.createStatement();
            ResultSet rs = null;
            con.setAutoCommit(false);
            if(col1.equals("Select")){
                 System.out.println("select " + col + " from " + table + " where "  + col + "" + opr + "to_date('" + value+"','dd-mm-yyyy')");
                 rs = st.executeQuery("select " + col + " from " + table + " where " + col + "" + opr + "to_date('" + value+"','dd-mm-yyyy')");
               
            }else if(col2.equals("Select")){
                System.out.println("select " + col1 + " from " + table + " where " + col + "" + opr + "to_date('" + value+"','dd-mm-yyyy')");
                rs = st.executeQuery("select " + col1 + " from " + table + " where" + col + "" + opr + "to_date('" + value+"','dd-mm-yyyy')");
                
            }else{
                System.out.println("select " + col1 +", "+col2 + " from " + table + " where " + col + "" + opr + "" + "to_date('" + value+"','dd-mm-yyyy')");
                rs = st.executeQuery("select " + col1 +", "+col2 + " from " + table + " where " + col + "" + opr + "" + "to_date('" + value+"','dd-mm-yyyy')");
            }   
            con.commit();
            
            DefaultTableModel model = new DefaultTableModel();

            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            System.out.println(columnCount);
            
            /*while(rs.next()){
                for(int i = 1; i<=columnCount;i++){
                    System.out.print("Colname:"+rsmd.getColumnName(i)+" value" +rs.getObject(i));
                }
                System.out.println();
            }*/
            
            for (int i = 1; i <= columnCount; i++) {
                model.addColumn(rsmd.getColumnName(i));
            }
            jTable1.setModel(model);
            while (rs.next()) {
                Object[] row = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    row[i - 1] = rs.getObject(i);
                }
                model.addRow(row);
            }
            con.close();
            rs.close();
            st.close();

            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Invalid querry! \n"+e.getMessage());
            e.printStackTrace();
        }
    }
    
     public void excQueryTime(String table, String col, String col1, String col2, String opr, String value) {
        jTable1.setEnabled(true);
        jTable1.setVisible(true);
        
        
        if(col1.equals("TRAJANJE")){
            col1 = "to_char("+col1+",'HH:MI')";
        }
        
        if(col2.equals("TRAJANJE")){
            col2 = "to_char("+col2+",'HH:MI')";
        }
        
        
        
        try {
            Connection con = OracleConnection.getConnection();
            Statement st = con.createStatement();
            ResultSet rs = null;
            con.setAutoCommit(false);
            if(col1.equals("Select")){
                if(col.equals("TRAJANJE")){
                 System.out.println("select to_char(" + col + ",'HH:MI') from " + table + " where " + col + "" + opr + "to_date('" + value+"','HH:MI')");
                 rs = st.executeQuery("select to_char(" + col + ",'HH:MI') from " + table + " where " + col + "" + opr + "to_date('" + value+"','HH:MI')");
                 
                }else{
                 System.out.println("select " + col + " from " + table + " where " + col + "" + opr + "to_date('" + value+"','HH:MI')");
                 rs = st.executeQuery("select " + col + " from " + table + " where " + col + "" + opr + "to_date('" + value+"','HH:MI')");
                }
               
            }else if(col2.equals("Select")){
                System.out.println("select " + col1 + " from " + table + " where " + col + "" + opr + "" + "to_date('" + value+"','HH:MI')");
                rs = st.executeQuery("select " + col1 + " from " + table + " where " + col + "" + opr + "" + "to_date('" + value+"','HH:MI')");
                
            }else{
                System.out.println("select " + col1 +", "+col2 + " from " + table + " where " + col + "" + opr + "" + "to_date('" + value+"','HH:MI')");
                rs = st.executeQuery("select " + col1 +", "+col2 + " from " + table + " where " + col + "" + opr + "" + "to_date('" + value+"','HH:MI')");
            }   
            con.commit();
            
            DefaultTableModel model = new DefaultTableModel();

            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            System.out.println(columnCount);
            
            /*while(rs.next()){
                for(int i = 1; i<=columnCount;i++){
                    System.out.print("Colname:"+rsmd.getColumnName(i)+" value" +rs.getObject(i));
                }
                System.out.println();
            }*/
            
            for (int i = 1; i <= columnCount; i++) {
                model.addColumn(rsmd.getColumnName(i));
            }
            jTable1.setModel(model);
            while (rs.next()) {
                Object[] row = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    row[i - 1] = rs.getObject(i);
                }
                model.addRow(row);
            }
            con.close();
            rs.close();
            st.close();

            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Invalid querry! \n"+e.getMessage());
            e.printStackTrace();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private com.github.lgooddatepicker.components.TimePicker timePicker1;
    // End of variables declaration//GEN-END:variables
}
